---
output: github_document
---


<!-- 
README.md is generated from README.Rmd. 
Please edit that file 
-->

```{r include=FALSE}
# Create .nojekyll file in the /docs folder
file.create('docs/.nojekyll')
# Avoid problems with "Onedrive - Universidade da Coruña" 
# devtools::check(getwd()) 
# pkgdown::build_site()
```


# esios2fd: Download and Convert ESIOS Indicators to Functional Data

The **esios2fd** package provides tools to download raw time-series indicator data from the Spanish Electricity Grid’s public ESIOS API ([https://www.esios.ree.es/](https://www.esios.ree.es/)) and transform it into functional data (`fdata`) objects and daily matrices (`ldata`) via the **fda.usc** framework.

For API documentation and FAQs, see:

- ESIOS API main site: [https://www.esios.ree.es/](https://www.esios.ree.es/)
- FAQ: [https://www.esios.ree.es/es/ayuda-preguntas-frecuentes](https://www.esios.ree.es/es/ayuda-preguntas-frecuentes)


```{r echo=FALSE, results='asis'}
if ('github_document' == rmarkdown::all_output_formats(knitr::current_input()) && !knitr:::is_html_output()) 
   cat('For more information visit the [web page](https://moviedo5.github.io/esios2fd) of the package.')
```

### `r paste("Version", packageVersion("esios2fd"))`

The **esios2fd** package supports three main workflows:

1. **On-the-Fly Query**

   - `esios2df()`: Fetch raw indicator data for any date-time range, returning a `data.frame` with one row per timestamp.
   - `esios2lfdata()`: Build an `ldata` object directly from `esios2df()`, producing daily curves without intermediate files.

2. **Annual Download & Functional Conversion**

   - `esios2csv()`: Download and save per-variable, per-year CSV files.
   - `esios2fdata()`: Convert those CSVs into `fdata` objects (and optional RDA files), handling daylight-saving transitions.
   - `esios2ldata()`: Merge all annual series into a single `ldata` object—one daily index plus functional data curves for each indicator.

3. **Indicator Management**

   - `esios2indicators()`: Retrieve and cache the catalog of available ESIOS indicators.
   - `esios2resolution()`: Clean indicator names, assign units, and detect which time resolutions each supports.


For more details, visit the [website](https://moviedo5.github.io/esios2fd) of the package.


## Installation


- If you downloaded it manually:

```r
install.packages("path/to/zip/esios2fd_0.2.0.zip",
                 repos = NULL, type = "win.binary")
```                       

- Or install directly from GitHub:
```r
remotes::install_github(
  "moviedo5/esios2fd-site",
  subdir = ".",
  repos   = NULL,
  type    = "win.binary"
)
 ```                       
                        
```{r include=FALSE}
# Create .nojekyll file in the /docs folder
file.create('docs/.nojekyll')
# Avoid Onedrive path issues
# pkgdown::build_site()
library(esios2fd)
```



## Fist setps

```{r example-lfdata, eval=TRUE, include=FALSE}
source("../esios_data/apikey_esios.txt")
```

```r
library(esios2fd)
api_key <- Sys.getenv("ESIOS_API_KEY")
```

## Example: On-the-Fly Query with `esios2lfdata()`

Fetch a combined daily `ldata` for Forecasted demand	(MWh) and Scheduled demand	(MWh)
 between two dates. Use resolution = "1hour" to match the default one hour granularity:

```{r example-lfdata2, eval=FALSE}
vars <- c("Real_demand_1293","Forecasted_demand_544", "Scheduled_demand_545")
out1 <- esios2lfdata(
  var_names   = vars,
  start_date  = "2025-04-25",
  end_date    = "2025-04-28",
  api_key     = api_key,
  resolution  = "1hour",
  verbose     = F
)

# Inspect metadata and plot first curves:
head(out1$df)
plot(out1, ylim=c(13e4,4e5), ylab="MWh")
```


```{r example-lfdata4, eval=FALSE,include=F}
pdf("apagon2025.pdf", width = 8, height = 5)
# Plot the daily curves (ylim chosen to focus on demand range)
plot(out1,
     ylim = c(1.3e5, 4e5),
     ylab = "Demand (MWh)"
     #main = "Forecasted vs. Scheduled Demand\nIberian Blackout April 28 2025"
     )
# Add vertical line at blackout moment
abline(v = as.POSIXct("2025-04-28 12:33", tz = "Europe/Madrid"),
       col = "blue", lwd = 2, lty = 2)
legend("bottom",
       legend = c("Blackout start (12:33 CEST)"),
       col    = "blue",
       lwd    = 2,
       lty    = 2,
       bty    = "n")
dev.off()
# Crear un PNG de 8×5 pulgadas a 150 dpi
png("figures/apagon2025.png",
    width  = 8,     # ancho en pulgadas
    height = 5,     # alto en pulgadas
    units  = "in",  # unidades en pulgadas
    res    = 150    # resolución en dpi
)

# Dibujar las curvas diarias (ylim ajustado para centrarse en el rango de demanda)
plot(out1,
     ylim = c(1.3e5, 4e5),
     ylab = "Demand (MWh)"
     # main = "Forecasted vs. Scheduled Demand\nIberian Blackout April 28 2025"
)

# Línea vertical en el momento del apagón
abline(v = as.POSIXct("2025-04-28 12:33", tz = "Europe/Madrid"),
       col = "blue", lwd = 2, lty = 2)

# Leyenda
legend("bottom",
       legend = "Blackout start (12:33 CEST)",
       col    = "blue",
       lwd    = 2,
       lty    = 2,
       bty    = "n"
)

dev.off()
```

For these indicators, the resolution can be increased to 5 minutes (the execution of the following code is not shown):

```{r example-lfdata5, eval=FALSE}
#vars <- c("Forecasted_demand_544", "Scheduled_demand_545")
out2 <- esios2lfdata(
  var_names   = vars,
  start_date  = "2025-04-25",
  end_date    = "2025-04-28",
  api_key     = api_key,
  resolution  = "5min",
  verbose     = F
)
plot(out2, ylim=c(1e4,35e3), ylab="MWh")
```

```{r fig:blackout, echo=FALSE, out.width='100%', fig.cap="Forecasted vs. Scheduled Demand — Iberian Blackout April 28 2025"}
knitr::include_graphics("figures/apagon2025.png")
```

<!--
Solar_PV_542	Solar PV generation forecast 	MWh	0	0	0	1	0	1	0	0
Solar_thermal_543	Solar thermal forecast	MWh 	0	0	0	1	0	1	0	0
Forecasted_demand_544	Forecasted demand	MWh	    0	1	1	1	0	1	0	0
Scheduled_demand_545	Scheduled demand	MWh	    0	1	1	1	0	1	0	0
Hydro_546	Real time generation hydro	MWh	      0	1	1	1	0	1	0	0
Coal_547	Real time generation coal	MWh	        0	1	1	1	0	1	0	0
Fuel_gas_548	Real time generation fuel-gas	MWh	0	0	0	0	0	0	0	0
Nuclear_549	Real time generation nuclear	MWh	  0	1	1	1	0	1	0	0
Wind_551	Real time generation wind	MWh	        0	1	1	1	0	1	0	0
Solar_552	Real time generation solar	MWh	      0	0	0	0	0	0	0	0
Combined_cycle_GT_550	Real time generation C.C. GT	MWh	0	1	1	1	0	1	0	0


vars <- c("Hydro_546","Coal_547","Nuclear_549",
          "Combined_cycle_GT_550","Wind_551","Solar_552")
  
par(mfrow=c(2,3))
for (i in 1:length(ldata))
    plot(ldata[[i]])
            

![Forecasted vs. Scheduled Demand\nIberian Blackout April 28 2025](figures/apagon2025.png)

<img src="figures/apagon2025.png" width="100%" />
-->

## Example: annual-download workflow with `esios2csv()`

This code downloads ESIOS indicator data year by year, convert it into
functional data, and enrich the resulting `ldata$df` with calendar attributes using `date2calendar()`.

```{r example-csv, eval=FALSE}
vars <- c("Solar_PV_542","Solar_543")
years <- 2022:2023

esios2csv(vars, years, api_key,
          resolution = "1hour",
          output_dir  = "./data_csv",
          verbose     = FALSE)

# Create functional data objects (.rda)
out3 <- esios2fdata(vars, years,
            resolution = "1hour",
            input_dir  = "./data_csv",
            output_dir = "./data_rda",
            verbose    = TRUE)

pal   <- colorRampPalette(c("blue", "yellow", "red", "yellow", "blue"))(365)

# 4. Grafica usando esos colores
par(mfrow = c(2, 2), mar = c(4, 4, 2, 1))
vars <- names(out3)[-1]   # omitimos el primer elemento 'df'
for (i in seq_along(vars)) {
  plot(out3[[ vars[i] ]],
       col  = pal[1:365],
       main = vars[i],
       lwd  = 1.5)
}


# Combine into unified ldata object
out4 <- esios2ldata(years, vars,
                     resolution = "1hour",
                     input_dir  = "./data_csv",
                     mode       = "csv",
                     verbose    = TRUE)

# Equivalent result when loading from RDA files
out4 <- esios2ldata(years, vars,
                    resolution = "1hour",
                    input_dir  = "./data_rda",
                    mode       = "rda",
                    verbose    = FALSE)

# Enrich the 'df' component with calendar attributes
out4$df <- date2calendar(
  out4$df,
  tz         = "Europe/Madrid",
  components = c("year","month","day_of_week","day_of_year")
)
# View the first and last rows of the annotated calendar data
rbind(head(out4$df),tail(out4$df))
# Plot example
#plot(out4,var.name="month")
pal   <- colorRampPalette(c("blue", "yellow", "red", "yellow", "blue"))(365*2)

plot(out4, col=pal[1:730])
```


### Indicator Catalog 

Retrieve metadata and resolution flags:

```{r example-indicators2, eval=FALSE}
inds <- esios2indicators(api_key, output_dir = "data_indicators")
res  <- esios2resolution(inds, api_key, verbose = TRUE)
head(res)
```

**Note:** This may take a long time, as there are almost 2,000 indicators where their resolution is consulted.

<!-- 
# install.packages("roxygen2")
# install.packages("devtools")
# install.packages("pkgdown")

library(roxygen2)
library(devtools)
# setwd("D:/Users/moviedo/github/fda.usc/")

pkgbuild::compile_dll()
#roxygenize()
devtools::document()
1

tools::checkRd("man/esios2df.Rd")
tools::checkRd("man/esios2indicators.Rd")
tools::checkRd("man/esios2lfdata.Rd")
tools::checkRd("man/esios2csv.Rd")
tools::checkRd("man/esios2ldata.Rd")
tools::checkRd("man/esios2fdata.Rd")


library(devtools)
# devtools::build()


knitr::knit("README.Rmd", output = "README.md")
library(pkgdown)
#pkgdown::clean_site(force = TRUE)
try(pkgdown::clean_site(force=TRUE), silent=TRUE)
pkgdown::build_site()

devtools::build()
devtools::check()
devtools::install()

# devtools::build_win()

# devtools::install_github("moviedo5/fda.usc",auth_user="moviedo5")
R CMD check --as-cran and R-wind-builder 
 
R CMD build esios2fd
R CMD check esios2fd_0.2.0.tar --as-cran  R-wind-builder 
R CMD INSTALL esios2fd_0.2.0.tar.gz --build

-->

# License

MIT + file LICENSE

# Information download from API

The new esios public website makes available of everybody an API for data download, which is detailed at https://api.esios.ree.es.

Calls displayed in this documentation are only examples.

To use API you must request a personal token by mailing to consultasios@@ree.es, due to public current token changes often.

# API para descarga de información
Este paquete cconsulta la API de esios (https://api.esios.ree.es), pra poder utilizar esta API el usuario debe solicitar su token personal enviando un correo indicando su nombre y apellidos a consultasios@ree.es.

Todas las peticiones se realizan a la API de ESIOS. **Debe seguirse** estrictamente
*las indicaciones oficiales de la API de REE*:

- El token se emite para uso personal del solicitante.
- En aplicaciones públicas, los datos deben almacenarse en un servidor propio
  y no hacerse peticiones directas a los sistemas de REE.
- Evitar peticiones masivas, redundantes o innecesarias (por ejemplo, datos
  ya descargados o indicadores inexistentes).
  

## Authors

* **Manuel Oviedo de la Fuente** [manuel.oviedo@udc.es](mailto:manuel.oviedo@udc.es)

# Citation

If you use **esios2fd** in published research, please cite:

> Oviedo de la Fuente, M. (2025). *esios2fd: Download and Convert ESIOS Indicators
to Functional Data*. R package version 0.1.0.

## Acknowledgments

This work was supported by grants from MICINN and the Xunta de Galicia (ED431C-2020-14, ED431G-2019/01), co-financed by the ERDF.


<!-- 
# install.packages("roxygen2")
# install.packages("devtools")
# install.packages("pkgdown")

library(roxygen2)
library(devtools)
# setwd("D:/Users/moviedo/github/fda.usc/")

pkgbuild::compile_dll()
#roxygenize()
devtools::document()
1

tools::checkRd("man/esios2df.Rd")
tools::checkRd("man/esios2indicators.Rd")
tools::checkRd("man/esios2lfdata.Rd")
tools::checkRd("man/esios2csv.Rd")
tools::checkRd("man/esios2ldata.Rd")
tools::checkRd("man/esios2fdata.Rd")


library(devtools)
# devtools::build()


knitr::knit("README.Rmd", output = "README.md")
-->
## References

* Febrero-Bande, M. and Oviedo de la Fuente, M. (2012). Statistical Computing in Functional Data Analysis: The R Package fda.usc. *Journal of Statistical Software*, 51(4):1–28. [https://doi.org/10.18637/jss.v051.i04](https://doi.org/10.18637/jss.v051.i04)
