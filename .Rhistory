end_date    = "2025-04-30",
api_key     = api_key,
resolution  = "1hour",
verbose     = F
)
# Inspect metadata and plot first curves:
head(out1$df)
plot(out1)
vars <- c("Real_demand_1293","Forecasted_demand_544", "Scheduled_demand_545")
out1 <- esios2lfdata(
var_names   = vars,
start_date  = "2025-04-26",
end_date    = "2025-04-30",
api_key     = api_key,
resolution  = "1hour",
verbose     = F
)
# Inspect metadata and plot first curves:
head(out1$df)
plot(out1)
plot(out1, ylim=c(15e4,4e5))
plot(out1, ylim=c(15e4,4e5))
vars <- c("Real_demand_1293","Forecasted_demand_544", "Scheduled_demand_545")
out1 <- esios2lfdata(
var_names   = vars,
start_date  = "2025-04-26",
end_date    = "2025-04-30",
api_key     = api_key,
resolution  = "1hour",
verbose     = F
)
# Inspect metadata and plot first curves:
head(out1$df)
plot(out1, ylim=c(14e4,4e5))
plot(out1, ylim=c(13e4,4e5))
vars <- c("Real_demand_1293","Forecasted_demand_544", "Scheduled_demand_545")
out1 <- esios2lfdata(
var_names   = vars,
start_date  = "2025-04-25",
end_date    = "2025-04-28",
api_key     = api_key,
resolution  = "1hour",
verbose     = F
)
# Inspect metadata and plot first curves:
head(out1$df)
plot(out1, ylim=c(13e4,4e5))
#vars <- c("Forecasted_demand_544", "Scheduled_demand_545")
out2 <- esios2lfdata(
var_names   = vars,
start_date  = "2022-12-25",
end_date    = "2023-01-03",
api_key     = api_key,
resolution  = "5min",
verbose     = F
)
plot(out2)
#vars <- c("Forecasted_demand_544", "Scheduled_demand_545")
out2 <- esios2lfdata(
var_names   = vars,
start_date  = "2025-04-25",
end_date    = "2025-04-28",
api_key     = api_key,
resolution  = "5min",
verbose     = F
)
plot(out2)
plot(out2, ylim=c(1e4,36e4))
plot(out2, ylim=c(1e4,36e3))
plot(out2, ylim=c(1e4,35e3))
plot(out2, ylim=c(1e4,35e3), ylab="MWh")
plot(out1,
ylim = c(1.3e5, 4e5),
ylab = "Demand (MWh)",
main = "Forecasted vs. Scheduled Demand\nIberian Blackout April 28 2025")
# Add vertical line at blackout moment
abline(v = as.POSIXct("2025-04-28 12:33", tz = "Europe/Madrid"),
col = "blue", lwd = 2, lty = 2)
legend("topright",
legend = c("Blackout start (12:33 CEST)"),
col    = "blue",
lwd    = 2,
lty    = 2,
bty    = "n")
plot(out1,
ylim = c(1.3e5, 4e5),
ylab = "Demand (MWh)",
main = "Forecasted vs. Scheduled Demand\nIberian Blackout April 28 2025")
plot(out1,
ylim = c(1.3e5, 4e5),
ylab = "Demand (MWh)",
main = "Forecasted vs. Scheduled Demand\nIberian Blackout April 28 2025")
plot(out1,
ylim = c(1.3e5, 4e5),
ylab = "Demand (MWh)"
#main = "Forecasted vs. Scheduled Demand\nIberian Blackout April 28 2025"
)
# Add vertical line at blackout moment
abline(v = as.POSIXct("2025-04-28 12:33", tz = "Europe/Madrid"),
col = "blue", lwd = 2, lty = 2)
legend("topright",
legend = c("Blackout start (12:33 CEST)"),
col    = "blue",
lwd    = 2,
lty    = 2,
bty    = "n")
plot(out1,
ylim = c(1.3e5, 4e5),
ylab = "Demand (MWh)"
#main = "Forecasted vs. Scheduled Demand\nIberian Blackout April 28 2025"
)
# Add vertical line at blackout moment
abline(v = as.POSIXct("2025-04-28 12:33", tz = "Europe/Madrid"),
col = "blue", lwd = 2, lty = 2)
legend("topleft",
legend = c("Blackout start (12:33 CEST)"),
col    = "blue",
lwd    = 2,
lty    = 2,
bty    = "n")
pdf("apagon2025.pdf", width = 8, height = 5)
# Plot the daily curves (ylim chosen to focus on demand range)
plot(out1,
ylim = c(1.3e5, 4e5),
ylab = "Demand (MWh)"
#main = "Forecasted vs. Scheduled Demand\nIberian Blackout April 28 2025"
)
# Add vertical line at blackout moment
abline(v = as.POSIXct("2025-04-28 12:33", tz = "Europe/Madrid"),
col = "blue", lwd = 2, lty = 2)
legend("topleft",
legend = c("Blackout start (12:33 CEST)"),
col    = "blue",
lwd    = 2,
lty    = 2,
bty    = "n")
dev.off()
# install.packages("roxygen2")
# install.packages("devtools")
# install.packages("pkgdown")
library(roxygen2)
library(devtools)
# setwd("D:/Users/moviedo/github/fda.usc/")
pkgbuild::compile_dll()
#roxygenize()
devtools::document()
1
tools::checkRd("man/esios2df.Rd")
tools::checkRd("man/esios2indicators.Rd")
tools::checkRd("man/esios2lfdata.Rd")
tools::checkRd("man/esios2csv.Rd")
tools::checkRd("man/esios2ldata.Rd")
tools::checkRd("man/esios2fdata.Rd")
library(devtools)
# devtools::build()
knitr::knit("README.Rmd", output = "README.md")
# install.packages("roxygen2")
# install.packages("devtools")
# install.packages("pkgdown")
library(roxygen2)
library(devtools)
# setwd("D:/Users/moviedo/github/fda.usc/")
pkgbuild::compile_dll()
#roxygenize()
devtools::document()
1
tools::checkRd("man/esios2df.Rd")
tools::checkRd("man/esios2indicators.Rd")
tools::checkRd("man/esios2lfdata.Rd")
tools::checkRd("man/esios2csv.Rd")
tools::checkRd("man/esios2ldata.Rd")
tools::checkRd("man/esios2fdata.Rd")
library(devtools)
# devtools::build()
knitr::knit("README.Rmd", output = "README.md")
# install.packages("roxygen2")
# install.packages("devtools")
# install.packages("pkgdown")
library(roxygen2)
library(devtools)
# setwd("D:/Users/moviedo/github/fda.usc/")
pkgbuild::compile_dll()
#roxygenize()
devtools::document()
1
tools::checkRd("man/esios2df.Rd")
tools::checkRd("man/esios2indicators.Rd")
tools::checkRd("man/esios2lfdata.Rd")
tools::checkRd("man/esios2csv.Rd")
tools::checkRd("man/esios2ldata.Rd")
tools::checkRd("man/esios2fdata.Rd")
library(devtools)
# devtools::build()
knitr::knit("README.Rmd", output = "README.md")
# install.packages("roxygen2")
# install.packages("devtools")
# install.packages("pkgdown")
library(roxygen2)
library(devtools)
# setwd("D:/Users/moviedo/github/fda.usc/")
pkgbuild::compile_dll()
#roxygenize()
devtools::document()
1
tools::checkRd("man/esios2df.Rd")
tools::checkRd("man/esios2indicators.Rd")
tools::checkRd("man/esios2lfdata.Rd")
tools::checkRd("man/esios2csv.Rd")
tools::checkRd("man/esios2ldata.Rd")
tools::checkRd("man/esios2fdata.Rd")
library(devtools)
# devtools::build()
knitr::knit("README.Rmd", output = "README.md")
# install.packages("roxygen2")
# install.packages("devtools")
# install.packages("pkgdown")
library(roxygen2)
library(devtools)
# setwd("D:/Users/moviedo/github/fda.usc/")
pkgbuild::compile_dll()
#roxygenize()
devtools::document()
1
tools::checkRd("man/esios2df.Rd")
tools::checkRd("man/esios2indicators.Rd")
tools::checkRd("man/esios2lfdata.Rd")
tools::checkRd("man/esios2csv.Rd")
tools::checkRd("man/esios2ldata.Rd")
tools::checkRd("man/esios2fdata.Rd")
library(devtools)
# devtools::build()
knitr::knit("README.Rmd", output = "README.md")
# install.packages("roxygen2")
# install.packages("devtools")
# install.packages("pkgdown")
library(roxygen2)
library(devtools)
# setwd("D:/Users/moviedo/github/fda.usc/")
pkgbuild::compile_dll()
#roxygenize()
devtools::document()
1
tools::checkRd("man/esios2df.Rd")
tools::checkRd("man/esios2indicators.Rd")
tools::checkRd("man/esios2lfdata.Rd")
tools::checkRd("man/esios2csv.Rd")
tools::checkRd("man/esios2ldata.Rd")
tools::checkRd("man/esios2fdata.Rd")
library(devtools)
# devtools::build()
knitr::knit("README.Rmd", output = "README.md")
library(pkgdown)
#pkgdown::clean_site(force = TRUE)
try(pkgdown::clean_site(force=TRUE), silent=TRUE)
pkgdown::build_site()
# install.packages("roxygen2")
# install.packages("devtools")
# install.packages("pkgdown")
library(roxygen2)
library(devtools)
# setwd("D:/Users/moviedo/github/fda.usc/")
pkgbuild::compile_dll()
#roxygenize()
devtools::document()
1
tools::checkRd("man/esios2df.Rd")
tools::checkRd("man/esios2indicators.Rd")
tools::checkRd("man/esios2lfdata.Rd")
tools::checkRd("man/esios2csv.Rd")
tools::checkRd("man/esios2ldata.Rd")
tools::checkRd("man/esios2fdata.Rd")
library(devtools)
# devtools::build()
knitr::knit("README.Rmd", output = "README.md")
library(pkgdown)
#pkgdown::clean_site(force = TRUE)
try(pkgdown::clean_site(force=TRUE), silent=TRUE)
pkgdown::build_site()
# install.packages("roxygen2")
# install.packages("devtools")
# install.packages("pkgdown")
library(roxygen2)
library(devtools)
# setwd("D:/Users/moviedo/github/fda.usc/")
pkgbuild::compile_dll()
#roxygenize()
devtools::document()
1
tools::checkRd("man/esios2df.Rd")
tools::checkRd("man/esios2indicators.Rd")
tools::checkRd("man/esios2lfdata.Rd")
tools::checkRd("man/esios2csv.Rd")
tools::checkRd("man/esios2ldata.Rd")
tools::checkRd("man/esios2fdata.Rd")
library(devtools)
# devtools::build()
knitr::knit("README.Rmd", output = "README.md")
library(pkgdown)
#pkgdown::clean_site(force = TRUE)
try(pkgdown::clean_site(force=TRUE), silent=TRUE)
pkgdown::build_site()
pdf("apagon2025.pdf", width = 8, height = 5)
# Plot the daily curves (ylim chosen to focus on demand range)
plot(out1,
ylim = c(1.3e5, 4e5),
ylab = "Demand (MWh)"
#main = "Forecasted vs. Scheduled Demand\nIberian Blackout April 28 2025"
)
# Add vertical line at blackout moment
abline(v = as.POSIXct("2025-04-28 12:33", tz = "Europe/Madrid"),
col = "blue", lwd = 2, lty = 2)
legend("topleft",
legend = c("Blackout start (12:33 CEST)"),
col    = "blue",
lwd    = 2,
lty    = 2,
bty    = "n")
dev.off()
# install.packages("roxygen2")
# install.packages("devtools")
# install.packages("pkgdown")
library(roxygen2)
library(devtools)
# setwd("D:/Users/moviedo/github/fda.usc/")
pkgbuild::compile_dll()
#roxygenize()
devtools::document()
1
tools::checkRd("man/esios2df.Rd")
tools::checkRd("man/esios2indicators.Rd")
tools::checkRd("man/esios2lfdata.Rd")
tools::checkRd("man/esios2csv.Rd")
tools::checkRd("man/esios2ldata.Rd")
tools::checkRd("man/esios2fdata.Rd")
library(devtools)
# devtools::build()
knitr::knit("README.Rmd", output = "README.md")
library(pkgdown)
#pkgdown::clean_site(force = TRUE)
try(pkgdown::clean_site(force=TRUE), silent=TRUE)
pkgdown::build_site()
plot(out1,
ylim = c(1.3e5, 4e5),
ylab = "Demand (MWh)"
#main = "Forecasted vs. Scheduled Demand\nIberian Blackout April 28 2025"
)
# Add vertical line at blackout moment
abline(v = as.POSIXct("2025-04-28 12:33", tz = "Europe/Madrid"),
col = "blue", lwd = 2, lty = 2)
legend("topleft",
legend = c("Blackout start (12:33 CEST)"),
col    = "blue",
lwd    = 2,
lty    = 2,
bty    = "n")
dev.off()
Ã§png("apagon2025.png", width = 8, height = 5)
png("apagon2025.png", width = 8, height = 5)
# Plot the daily curves (ylim chosen to focus on demand range)
plot(out1,
ylim = c(1.3e5, 4e5),
ylab = "Demand (MWh)"
#main = "Forecasted vs. Scheduled Demand\nIberian Blackout April 28 2025"
)
png("apagon2025.png", width = 8, height = 5)
# Plot the daily curves (ylim chosen to focus on demand range)
plot(out1,
ylim = c(1.3e5, 4e5),
ylab = "Demand (MWh)"
#main = "Forecasted vs. Scheduled Demand\nIberian Blackout April 28 2025"
)
par(mfrow=c(1,1))
png("apagon2025.png", width = 8, height = 5)
# Plot the daily curves (ylim chosen to focus on demand range)
plot(out1,
ylim = c(1.3e5, 4e5),
ylab = "Demand (MWh)"
#main = "Forecasted vs. Scheduled Demand\nIberian Blackout April 28 2025"
)
# Crear un PNG de 8Ã5 pulgadas a 150 dpi
png("figures/apagon2025.png",
width  = 8,     # ancho en pulgadas
height = 5,     # alto en pulgadas
units  = "in",  # unidades en pulgadas
res    = 150    # resoluciÃ³n en dpi
)
# Dibujar las curvas diarias (ylim ajustado para centrarse en el rango de demanda)
plot(out1,
ylim = c(1.3e5, 4e5),
ylab = "Demand (MWh)"
# main = "Forecasted vs. Scheduled Demand\nIberian Blackout April 28 2025"
)
# LÃ­nea vertical en el momento del apagÃ³n
abline(v = as.POSIXct("2025-04-28 12:33", tz = "Europe/Madrid"),
col = "blue", lwd = 2, lty = 2)
# Leyenda
legend("topleft",
legend = "Blackout start (12:33 CEST)",
col    = "blue",
lwd    = 2,
lty    = 2,
bty    = "n"
)
dev.off()
pdf("apagon2025.pdf", width = 8, height = 5)
# Plot the daily curves (ylim chosen to focus on demand range)
plot(out1,
ylim = c(1.3e5, 4e5),
ylab = "Demand (MWh)"
#main = "Forecasted vs. Scheduled Demand\nIberian Blackout April 28 2025"
)
# Add vertical line at blackout moment
abline(v = as.POSIXct("2025-04-28 12:33", tz = "Europe/Madrid"),
col = "blue", lwd = 2, lty = 2)
legend("bottom",
legend = c("Blackout start (12:33 CEST)"),
col    = "blue",
lwd    = 2,
lty    = 2,
bty    = "n")
dev.off()
# Crear un PNG de 8Ã5 pulgadas a 150 dpi
png("figures/apagon2025.png",
width  = 8,     # ancho en pulgadas
height = 5,     # alto en pulgadas
units  = "in",  # unidades en pulgadas
res    = 150    # resoluciÃ³n en dpi
)
# Dibujar las curvas diarias (ylim ajustado para centrarse en el rango de demanda)
plot(out1,
ylim = c(1.3e5, 4e5),
ylab = "Demand (MWh)"
# main = "Forecasted vs. Scheduled Demand\nIberian Blackout April 28 2025"
)
# LÃ­nea vertical en el momento del apagÃ³n
abline(v = as.POSIXct("2025-04-28 12:33", tz = "Europe/Madrid"),
col = "blue", lwd = 2, lty = 2)
# Leyenda
legend("bottom",
legend = "Blackout start (12:33 CEST)",
col    = "blue",
lwd    = 2,
lty    = 2,
bty    = "n"
)
dev.off()
library(roxygen2)
library(devtools)
# setwd("D:/Users/moviedo/github/fda.usc/")
pkgbuild::compile_dll()
#roxygenize()
devtools::document()
1
tools::checkRd("man/esios2df.Rd")
tools::checkRd("man/esios2indicators.Rd")
tools::checkRd("man/esios2lfdata.Rd")
tools::checkRd("man/esios2csv.Rd")
tools::checkRd("man/esios2ldata.Rd")
tools::checkRd("man/esios2fdata.Rd")
library(devtools)
# devtools::build()
knitr::knit("README.Rmd", output = "README.md")
library(pkgdown)
#pkgdown::clean_site(force = TRUE)
try(pkgdown::clean_site(force=TRUE), silent=TRUE)
pkgdown::build_site()
library(roxygen2)
library(devtools)
# setwd("D:/Users/moviedo/github/fda.usc/")
pkgbuild::compile_dll()
#roxygenize()
devtools::document()
1
tools::checkRd("man/esios2df.Rd")
tools::checkRd("man/esios2indicators.Rd")
tools::checkRd("man/esios2lfdata.Rd")
tools::checkRd("man/esios2csv.Rd")
tools::checkRd("man/esios2ldata.Rd")
tools::checkRd("man/esios2fdata.Rd")
library(devtools)
# devtools::build()
knitr::knit("README.Rmd", output = "README.md")
library(pkgdown)
#pkgdown::clean_site(force = TRUE)
try(pkgdown::clean_site(force=TRUE), silent=TRUE)
pkgdown::build_site()
devtools::build()
devtools::check()
devtools::install()
library(roxygen2)
library(devtools)
# setwd("D:/Users/moviedo/github/fda.usc/")
pkgbuild::compile_dll()
#roxygenize()
devtools::document()
1
tools::checkRd("man/esios2df.Rd")
tools::checkRd("man/esios2indicators.Rd")
tools::checkRd("man/esios2lfdata.Rd")
tools::checkRd("man/esios2csv.Rd")
tools::checkRd("man/esios2ldata.Rd")
tools::checkRd("man/esios2fdata.Rd")
library(devtools)
# devtools::build()
knitr::knit("README.Rmd", output = "README.md")
library(pkgdown)
#pkgdown::clean_site(force = TRUE)
try(pkgdown::clean_site(force=TRUE), silent=TRUE)
pkgdown::build_site()
devtools::build()
devtools::check()
devtools::install()
